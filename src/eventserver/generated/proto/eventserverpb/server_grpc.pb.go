// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: src/eventserver/generated/proto/eventserverpb/server.proto

package eventserverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventServer_Connect_FullMethodName = "/chatserver.EventServer/Connect"
)

// EventServerClient is the client API for EventServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServerClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (EventServer_ConnectClient, error)
}

type eventServerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServerClient(cc grpc.ClientConnInterface) EventServerClient {
	return &eventServerClient{cc}
}

func (c *eventServerClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (EventServer_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventServer_ServiceDesc.Streams[0], EventServer_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServerConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventServer_ConnectClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServerConnectClient struct {
	grpc.ClientStream
}

func (x *eventServerConnectClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServerServer is the server API for EventServer service.
// All implementations must embed UnimplementedEventServerServer
// for forward compatibility
type EventServerServer interface {
	Connect(*ConnectRequest, EventServer_ConnectServer) error
	mustEmbedUnimplementedEventServerServer()
}

// UnimplementedEventServerServer must be embedded to have forward compatible implementations.
type UnimplementedEventServerServer struct {
}

func (UnimplementedEventServerServer) Connect(*ConnectRequest, EventServer_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedEventServerServer) mustEmbedUnimplementedEventServerServer() {}

// UnsafeEventServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServerServer will
// result in compilation errors.
type UnsafeEventServerServer interface {
	mustEmbedUnimplementedEventServerServer()
}

func RegisterEventServerServer(s grpc.ServiceRegistrar, srv EventServerServer) {
	s.RegisterService(&EventServer_ServiceDesc, srv)
}

func _EventServer_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServerServer).Connect(m, &eventServerConnectServer{stream})
}

type EventServer_ConnectServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServerConnectServer struct {
	grpc.ServerStream
}

func (x *eventServerConnectServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// EventServer_ServiceDesc is the grpc.ServiceDesc for EventServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatserver.EventServer",
	HandlerType: (*EventServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _EventServer_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/eventserver/generated/proto/eventserverpb/server.proto",
}
